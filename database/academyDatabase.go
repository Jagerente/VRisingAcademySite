package database

import (
	"VRisingAcademySite/database/tables"
	"database/sql"
	"fmt"

	_ "github.com/lib/pq"
)

const (
	connectionString         string = "user=%s password=%s host=%s port=%d dbname=vrisingdb sslmode=disable"
	connectionStringBaseless string = "user=%s password=%s host=%s port=%d sslmode=disable"
	checkConnectionString    string = `SELECT * FROM CheckTable limit 1`
	postgresUser             string = "postgres"
	postgresPassword         string = "12345678"
	postgresHost             string = "localhost"
	postgresPort             int32  = 5432
)

//Checks if database exists
func CheckIfDatabaseExists() bool {
	connection, _ := sql.Open("postgres", fmt.Sprintf(connectionString,
		postgresUser,
		postgresPassword,
		postgresHost,
		postgresPort))

	var result1, result2 int32
	item := connection.QueryRow(checkConnectionString)
	readError := item.Scan(&result1, &result2)
	connection.Close()

	if readError != nil {
		return false
	}

	return true
}

//Creates connection to database
func CreateConnection() *sql.DB {
	db, err := sql.Open("postgres", fmt.Sprintf(connectionString,
		postgresUser,
		postgresPassword,
		postgresHost,
		postgresPort))
	if err != nil {
		panic(err)
	}
	return db
}

//Initializes database
func InitializeDatabase() {
	connection, err := sql.Open("postgres", fmt.Sprintf(connectionStringBaseless,
		postgresUser,
		postgresPassword,
		postgresHost,
		postgresPort))
	if err != nil {
		panic(err)
	}

	_, k := connection.Query("CREATE DATABASE vrisingdb;")
	if k != nil {
		connection.Close()
		panic(k)
	}
	connection.Close()

	connection = CreateConnection()
	defer connection.Close()

	connection.Exec("CREATE TABLE CheckTable (Id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, Exists INTEGER NOT NULL);")

	connection.Exec(fmt.Sprintf(
		tables.BaseCreateGameEntityQuery,
		tables.ItemsTableName,
		fmt.Sprintf("%s INTEGER NOT NULL DEFAULT 0", tables.ItemTierField)))

	connection.Exec(fmt.Sprintf(
		tables.BaseCreateGameEntityQuery,
		tables.RecipeTableName,
		fmt.Sprintf(`%s INTEGER NOT NULL REFERENCES %s(%s) ON DELETE CASCADE`,
			tables.RecipeResultField,
			tables.ItemsTableName,
			tables.IdField)))

	connection.Exec("INSERT INTO CheckTable(Exists) VALUES (1);")
	connection.Close()
}
